type Staked @entity {
  id: ID!
  userAddress: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

type UserStakedTotal @entity {
  id: ID!
  totalStaked: BigInt!
  timesStaked: BigInt!
}

type RollingStakedForLast24Hour @entity {
  id: ID!
  cumulativeAmount: BigInt!
  stakes: [String!]!
  count: BigInt!
}

type Redeem @entity {
  id: ID!
  userAddress: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

type UserRedeemedTotal @entity {
  id: ID!
  totalRedeemed: BigInt!
  timesRedeemed: BigInt!
}

type RollingRedeemedForLast24Hour @entity {
  id: ID!
  cumulativeAmount: BigInt!
  redeems: [String!]!
  count: BigInt!
}

type RewardsAccrued @entity {
  id: ID!
  userAddress: Bytes!
  accruedRewards: BigInt!
  timestamp: BigInt!
}

type RewardsClaimed @entity {
  id: ID!
  userAddress: Bytes!
  amountToClaim: BigInt!
  timestamp: BigInt!
}

type UniqueWallet @entity {
  id: ID!
  count: BigInt!
}

type UniqueWalletCount @entity {
  id: ID!
  count: BigInt!
}

type CoolDownUser @entity {
  id: ID!
  userAddress: Bytes!
  timestamp: BigInt!
}

type CoolDown @entity {
  id: ID!
  count: BigInt!
}

type CoolDownCount @entity{
  id: ID!
  count: BigInt!
}

type RollingCoolDownForLast24Hour @entity {
  id: ID!
  cooldowns: [String!]!
  count: BigInt!
}